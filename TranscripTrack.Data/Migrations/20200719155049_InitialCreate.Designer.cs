// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TranscripTrack.Data;

namespace TranscripTrack.Data.Migrations
{
    [DbContext(typeof(TrackerDbContext))]
    [Migration("20200719155049_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("TranscripTrack.Data.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("TEXT");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("TranscripTrack.Data.LineRate", b =>
                {
                    b.Property<int>("LineRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT");

                    b.HasKey("LineRateId");

                    b.HasIndex("ProfileId");

                    b.ToTable("LineRates");
                });

            modelBuilder.Entity("TranscripTrack.Data.LineRateEntry", b =>
                {
                    b.Property<int>("LineRateEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LineRateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumLines")
                        .HasColumnType("INTEGER");

                    b.HasKey("LineRateEntryId");

                    b.HasIndex("LineRateId");

                    b.ToTable("LineRateEntries");
                });

            modelBuilder.Entity("TranscripTrack.Data.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ProfileId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("TranscripTrack.Data.LineRate", b =>
                {
                    b.HasOne("TranscripTrack.Data.Profile", "Profile")
                        .WithMany("LineRates")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TranscripTrack.Data.LineRateEntry", b =>
                {
                    b.HasOne("TranscripTrack.Data.LineRate", "LineRate")
                        .WithMany("LineRateEntries")
                        .HasForeignKey("LineRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TranscripTrack.Data.Profile", b =>
                {
                    b.HasOne("TranscripTrack.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
